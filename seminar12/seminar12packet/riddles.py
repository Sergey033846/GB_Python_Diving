# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤–Ω—É—Ç—Ä–∏.
# üìå –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∑–∞–≥–∞–¥–∫—É, —Å–ø–∏—Å–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≥–∞–¥–æ–∫ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ.
# üìå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª–∞ –æ—Ç–≥–∞–¥–∞–Ω–∞ –∑–∞–≥–∞–¥–∫–∞ –∏–ª–∏ –Ω–æ–ª—å, –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã.

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ5
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–¥—É–ª—å —Å –∑–∞–≥–∞–¥–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Å–ª–æ–≤–∞—Ä—å —Å–ø–∏—Å–∫–æ–≤.
# üìå –ö–ª—é—á —Å–ª–æ–≤–∞—Ä—è - –∑–∞–≥–∞–¥–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å –æ—Ç–≥–∞–¥–∫–∞–º–∏.
# üìå –§—É–Ω–∫—Ü–∏—è –≤ —Ü–∏–∫–ª–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∑–∞–≥–∞–¥—ã–≤–∞—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–π –≤—Å–µ —Å–≤–æ–∏ –∑–∞–≥–∞–¥–∫–∏.

# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–¥—É–ª—å —Å –∑–∞–≥–∞–¥–∫–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É (—Ç–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∫–∏) –∏ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∞ —É–≥–∞–¥–∞–Ω–∞).
# üìå –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—è.
# üìå –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è.
# üìå –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≥–∞–¥—ã–≤–∞–Ω–∏—è –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–∏–¥–µ.
# üìå –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.

__all__ = ['answer_all_riddles']


_results_all_riddles = dict()
ATTEMPTS_COUNT = 3


def answer_the_riddle(riddle: str, answers: list, attempts: int) -> bool:            
    print(f'–ú–æ—è –∑–∞–≥–∞–¥–∫–∞: {riddle}. \n–ß—Ç–æ–±—ã –µ—ë –æ—Ç–≥–∞–¥–∞—Ç—å —É —Ç–µ–±—è –µ—Å—Ç—å {attempts} –ø–æ–ø—ã—Ç–æ–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!')
    answers = list(map(lambda x: x.lower(), answers))    
    for attempt in range(attempts):
        user_answer = input(f'–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ {attempt + 1}: ').lower()        
        if user_answer in answers:
            print(f'–¢—ã —É–≥–∞–¥–∞–ª —Å {attempt + 1} –ø–æ–ø—ã—Ç–∫–∏!')
            return attempt + 1
        else:
            print('–ù–µ —É–≥–∞–¥–∞–ª! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë!')
    return 0


def answer_all_riddles():    
    dict_riddles = {'–ø–µ—Ä–≤–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –æ—Ç –°–æ–ª–Ω—Ü–∞': ['–ú–µ—Ä–∫—É—Ä–∏–π'], 
                    '–≤—Ç–æ—Ä–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –æ—Ç –°–æ–ª–Ω—Ü–∞': ['–í–µ–Ω–µ—Ä–∞'], }
    for riddle, riddle_answers in dict_riddles.items():
         add_riddle_result(riddle, answer_the_riddle(riddle, riddle_answers, ATTEMPTS_COUNT))        
    print_riddles_results()
    

def add_riddle_result(riddle: str, attempt: int) -> dict:
    global _results_all_riddles
    _results_all_riddles[riddle] = attempt    
    

def print_riddles_results():
    global _results_all_riddles
    print('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è:')
    for riddle, attempt in _results_all_riddles.items():
        print(f'–ó–∞–≥–∞–¥–∫–∞ "{riddle}": {f'–ø–æ–ø—ã—Ç–∫–∞ {attempt}' if attempt else '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!'}')


if __name__ == '__main__':
    answer_all_riddles()
