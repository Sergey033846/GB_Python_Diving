# –ó–∞–¥–∞–Ω–∏–µ ‚Ññ6
# üìå –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–∏–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä wraps –≤ –∫–∞–∂–¥—ã–π –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.


from typing import Callable
import json
import random as rnd
import os
from functools import wraps 


def count(num: int = 1):
    def deco(func: Callable): 
        @wraps(func)       
        def wrapper(*args, **kwargs): 
            for i in range(num):
                print(f'–ò—Ç–µ—Ä–∞—Ü–∏—è #{i + 1}')
                func(*args, **kwargs)

        return wrapper    
    return deco


def save2json(func: Callable):        
    @wraps(func)       
    def wrapper(*args, **kwargs):        
        result = func(*args, **kwargs)       

        dict1 = dict()   
        
        path_ = os.path.join(os.getcwd(), f'{func.__name__}.json')

        # —á–∏—Ç–∞–µ–º —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π json-—Ñ–∞–π–ª        
        if os.path.exists(path_):
            with open(path_, 'r', encoding='utf-8') as fjson:        
                dict1 = json.load(fjson)                
        
        # –≤–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è        
        dict1[str(result)] = {'args': args, 'kwargs': kwargs}
                
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π json-—Ñ–∞–π–ª
        with open(path_, 'w', encoding='utf-8') as fjson:        
            json.dump(dict1, fjson, indent=4, ensure_ascii=False)        

        return result
    
    return wrapper


def enter_and_check_number_and_attempts(func: Callable):        
    @wraps(func)       
    def wrapper(*args, **kwargs):
        number, attempts, *_ = args        
        if not 1 <= number <= 100:
            number = rnd.randint(1, 100)
        if not 1 <= attempts <= 10:
            attempts = rnd.randint(1, 10)
        print(f'–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {number}')        # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts}')
        
        return func(number, attempts)        
                        
    return wrapper


@count(3)
@save2json
@enter_and_check_number_and_attempts
def guessing(number, attempts):                
    attempt = 1        
    while attempt <= attempts:
        yournumber = int(input(f'–ü–æ–ø—ã—Ç–∫–∞ –Ω–æ–º–µ—Ä {attempt}. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100: '))
        if (yournumber > number):
            print('–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ')
        elif (yournumber < number):
            print('–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ')
        elif (yournumber == number):
            print(f'–í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ —Å {attempt} –ø–æ–ø—ã—Ç–∫–∏!')
            break 
        attempt += 1
    else:
        print('–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.')
        return {number: -1}
    return {number: attempt}


guessing(23, 3)
